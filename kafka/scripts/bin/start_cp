#!/bin/bash

# Usage
Usage() {
    echo "Usage: ${PROG_NAME} "
    echo "  -D|--dry-run: perform dry run (default: false)"
    echo "  -f|--fresh: create fresh cluster (default: false)"
    echo "  -d|--num-dc: number of data centers (default: 1)"
    echo "  -n|--num-broker: number of brokers per DC (default: 1)"
    echo "  -a|--auth: authn method. Values noauth, plain, scram, gssapi, rbac (default: noauth)"
    echo "  -h|--help: print help"
}

MyEcho() {
    echo [`date +"%Y-%m-%d %H:%M:%S"`] $1 $2
}

# Validate
Validate() {
    if [[ ! -d ${CONFLUENT_HOME} ]] ; then
        MyEcho "ERROR" "CONFLUENT_HOME is not set"
        exit 1
    fi

    if [[ ${NUM_BROKER} -lt 1 ]] ; then
        MyEcho "ERROR" "Number of brokers must be greater than 0"
        Usage
        exit 1
    fi

    if [[ ${NUM_DC} -ne 1 ]] ; then
        MyEcho "ERROR" "Number of DC must be equal to 1. greater than 1 to be implemented"
        Usage
        exit 1
    fi
    DC_ID=1

    if [[ ${NUM_BROKER} -gt 1 ]] ; then
        REPLICATION_FACTOR=$(( ${NUM_BROKER} - 1 ))
        if [[ ${REPLICATION_FACTOR} -gt 2 ]] ; then
          MIN_ISR=$(( ${REPLICATION_FACTOR} - 1 ))
        fi
    fi
    case ${AUTHN} in
        noauth|plain|scram|gssapi|rbac)
        export AUTHN
        ;;
        *)
        MyEcho "ERROR" "Unknown value ${AUTHN} for option -a or --authn"
        Usage
        exit 1
        ;;
    esac

}

# Echo vars
EchoVars() {
    echo ""
    echo ""
    MyEcho "INFO" "####################"
    MyEcho "INFO" "Begin All Vars"
    MyEcho "INFO" "####################"
    MyEcho "INFO" "PROG_NAME="${PROG_NAME}
    MyEcho "INFO" "FRESH="${FRESH}
    MyEcho "INFO" "DRY_RUN="${DRY_RUN}
    MyEcho "INFO" "NUM_DC="${NUM_DC}
    MyEcho "INFO" "NUM_BROKER="${NUM_BROKER}
    MyEcho "INFO" "MIN_ISR="${MIN_ISR}
    MyEcho "INFO" "REPLICATION_FACTOR="${REPLICATION_FACTOR}
    MyEcho "INFO" "AUTHN="${AUTHN}
    MyEcho "INFO" "####################"
    MyEcho "INFO" "End All Vars"
    MyEcho "INFO" "####################"
    echo ""
    echo ""
}

# Process args
ProcessArgs() {
    POSITIONAL_ARGS=()

    NUM_DC=1
    NUM_BROKER=1
    REPLICATION_FACTOR=1
    MIN_ISR=1
    PROG_NAME=$0
    FRESH=0
    NOHUP=1
    DRY_RUN=0
    AUTHN=noauth

    if [[ $# -eq 0 ]]; then
        return
    fi

    while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--num-broker)
        export NUM_BROKER="$2"
        shift # past argument
        shift # past value
        ;;
        -d|--num-dc)
        export NUM_DC="$2"
        shift # past argument
        shift # past value
        ;;
        -a|--authn)
        export AUTHN="$2"
        shift # past argument
        shift # past value
        ;;
        -f|--fresh)
        export FRESH=1
        shift # past argument
        ;;
        -D|--dry-run)
        export DRY_RUN=1
        shift # past argument
        ;;
        -h|--help)
        MyEcho "INFO" "Printing help"
        Usage
        exit 0
        ;;
        -*|--*)
        MyEcho "ERROR" "Unknown option $1"
        Usage
        exit 1
        ;;
        *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
    done

    set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters
}

RunProcess() {
    if [[ ${FRESH} -eq 1 ]] ; then
        MyEcho "INFO" "Deleting log dir ${LOG_DIR}"
        if [[ ${DRY_RUN} -eq 0 ]] ; then
            rm -Rf ${LOG_DIR}
            mkdir -p ${LOG_DIR}
        fi

        MyEcho "INFO" "Deleting data dir ${DATA_DIR}"
        if [[ ${DRY_RUN} -eq 0 ]] ; then
            rm -Rf ${DATA_DIR}
            mkdir -p ${DATA_DIR}
        fi
    fi
    mkdir -p ${LOG_DIR}
    mkdir -p ${DATA_DIR}

    MyEcho "INFO" "Starting ZooKeeper nohup ${SCRIPT_DIR}/start_zk 2>&1 > ${LOG_DIR}/zk.log ..."
    if [[ ${DRY_RUN} -eq 0 ]] ; then
        nohup ${SCRIPT_DIR}/start_zk 2>&1 > ${LOG_DIR}/zk.log &
    fi
    
    DC_ITER=1
    while [[ ${DC_ITER} -le ${NUM_DC} ]]
    do
        DC_ID=${DC_ITER}
        BROKER_ITER=1
        while [[ ${BROKER_ITER} -le ${NUM_BROKER} ]]
        do
            BROKER_ID=${BROKER_ITER}
            MyEcho "INFO" "Sleeping 5 secs ..."
            sleep 5
            MyEcho "INFO" "Starting Broker ${SCRIPT_DIR}/start_ak --replication-factor ${REPLICATION_FACTOR} --min-isr ${MIN_ISR} --broker-id ${BROKER_ID} --dc-id ${DC_ID} --authn ${AUTHN} --nohup ..."
            if [[ ${DRY_RUN} -eq 0 ]] ; then
                ${SCRIPT_DIR}/start_ak --replication-factor ${REPLICATION_FACTOR} --min-isr ${MIN_ISR} --broker-id ${BROKER_ID} --dc-id ${DC_ID} --authn ${AUTHN} --nohup
            fi
            BROKER_ITER=$(( ${BROKER_ITER} + 1 ))
        done
        DC_ITER=$(( ${DC_ITER} + 1 ))
    done

    MyEcho "INFO" "Sleeping 5 secs ..."
    sleep 5
    MyEcho "INFO" "Starting Control Center nohup ${SCRIPT_DIR}/start_c3 --replication-factor ${REPLICATION_FACTOR} --authn ${AUTHN} --nohup 2>&1 > ${LOG_DIR}/c3.log ..."
    if [[ ${DRY_RUN} -eq 0 ]] ; then
        nohup ${SCRIPT_DIR}/start_c3 --replication-factor ${REPLICATION_FACTOR} --authn ${AUTHN} --nohup 2>&1 > ${LOG_DIR}/c3.log &
    fi

}

LoadState() {
    if [[ -f ${STATE_FILE} ]] ; then
        MyEcho "INFO" "File exists {STATE_FILE}=${STATE_FILE}"
        source ${STATE_FILE}
    fi
}

CheckState() {
    if [[ -z "${DC0}" ]] ; then
        MyEcho "ERROR" "NO DC in ${STATE_FILE}"
        # No info from .state file
        return
    fi
    if [[ ${FRESH} -eq 1 ]] ; then
        MyEcho "INFO" "Fresh deploy"
        # Fresh deploy; Don't check state
        return
    fi
    
    if [[ "${AUTHN}" -ne "${AUTHN0}" ]] ; then
        MyEcho "ERROR" "State Mismatch: Current Authn ${AUTHN0}, Needed Authn ${AUTHN}. Use Fresh Deploy option. Exiting ..."
        Usage
        exit 1
    fi
    if [[ "${NUM_DC}" -ne "${DC0}" ]] ; then
        MyEcho "ERROR" "State Mismatch: Current DC ${DC0}, Needed DC ${NUM_DC}. Use Fresh Deploy option. Exiting ..."
        Usage
        exit 1
    fi
    if [[ "${NUM_BROKER}" -ne "${BROKER0}" ]] ; then
        MyEcho "ERROR" "State Mismatch: Current Broker ${BROKER0}, Needed Broker ${NUM_BROKER}. Use Fresh Deploy option. Exiting ..."
        Usage
        exit 1
    fi
}

CommitState() {
    if [[ ${DRY_RUN} -eq 1 ]] ; then
        return
    fi
    echo "CURR_TIME=`date '+%Y%m%d_%H%M%S'`" > ${STATE_FILE}
    echo "AUTHN0=${AUTHN}" >> ${STATE_FILE}
    echo "DC0=${NUM_DC}" >> ${STATE_FILE}
    echo "BROKER0=${NUM_BROKER}" >> ${STATE_FILE}
}

# Main function
main() {
    source ${base_dir}/common
    Precheck
    LoadState
    ProcessArgs $@
    CheckState
    Validate
    EchoVars
    RunProcess
    CommitState
}

######################################################################
# Main Processing Starts Here
######################################################################
base_dir=$(dirname $0)
main $@
